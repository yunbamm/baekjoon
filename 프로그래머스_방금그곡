#include <string>
#include <vector>
#include<iostream>
#include <queue>

using namespace std;

//!!!!!!!!!!!!!!!!주의 : #에대한 처리 

//음악길이 < 재생시간 : 처음부터 반복해서 재생
//음악길이 > 재생시간 : 처음부터 재생시간 만큼만
//00:00을 넘겨서 재생되는 경우 X
//음악이 여러개면 재생시간이 긴음악  , 재생시간도 같다면 먼저입력된 음악


//pq에 재생시간 , -index , 제목 , 악보

//1. 재생시간 구하기
//2. 재생시간만큼 악보 자르기
vector<int> time_v;
vector<string> title;
vector<string> music;

priority_queue<pair<pair<int, int>, pair<string, string>>> pq;



//악보 , 내가들은 음 , index
bool find(string s, string tmp , int index) {


	for (int i = 0; i < tmp.size(); i++) {

		//범위가 벗어나면
		if (i + index >= s.size()) return false;

		if (s[i + index] != tmp[i]) return false;
	}
	return true;
}

//넣을때도 #을 주의해야한다
string process(int time ,string s) {

	string result;
	int index = 0;
	for (int i = 0; i < time; i++) {
		result += s[index];
		index++;
		if (index == s.size()) index = 0;
	}
	return result;
}
int re_time(int s, int e) {

	int h1 = s / 100;
	int m1 = s % 100;
	int h2 = e / 100;
	int m2 = e % 100;

	int h = h2 - h1;
	int m = m2 - m1;

	if (m < 0) {
		h--;
		m += 60;
	}
	return h * 60 + m;
}
string solution(string m, vector<string> musicinfos) {
	string answer = "";
	
	string tmp_m;
	//m을 재 처리
	for (int i = 0; i < m.size(); i++) {
		if (m[i] == '#') {
			tmp_m.back() = tmp_m.back() + 32;
		}
		else tmp_m += m[i];
	}

	m = tmp_m;
	// 1
	for (int i = 0; i < musicinfos.size(); i++) {
		string now = musicinfos[i];


		cout << now.substr(0, 5) << "\n";
		int tmp = 0;		//0일때 시작시간  , 1 일때 종료시간 , 2일때 제목 ,3일때 악보
		int s_time = 0;		
		int e_time = 0;
		string t;
		string mu;

		for (int j = 0; j < now.size(); j++) {
			
			if (now[j] == ':') continue;
			
			if (tmp == 0) {
				if (now[j] == ',') tmp++;
				else {
					s_time *= 10;
					s_time += now[j] - '0';
				}
			}
			else if (tmp == 1) {
				if (now[j] == ',') tmp++;
				else {
					e_time *= 10;
					e_time += now[j] - '0';
				}
			}
			else if (tmp == 2) {
				if (now[j] == ',') tmp++;
				else t += now[j];
			}
			//악보에서 #이 들어오면 소문자로 처리
			else if (tmp == 3) {
				if (now[j] == '#') mu.back() = mu.back() + 32;
				else mu += now[j];
			}
		}
		int time = re_time(s_time, e_time);

		// 2
		pq.push({ {time , -i},{t,process(time , mu)} });
	}


	bool flag = false;
	while (!pq.empty()) {
		int t = pq.top().first.first;
		string mu = pq.top().second.second;
		string title = pq.top().second.first;

		pq.pop();

		for (int i = 0; i  < mu.size(); i++) {
			if (mu[i] == m[0]) {
				if (find(mu, m, i)) {
					flag = true;
					answer = title;
					break;
				}
			}
		}

		if (flag) break;

	}
	if (!flag) answer = "(None)";

	cout << answer;
	return answer;
}
