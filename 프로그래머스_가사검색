#include <string>
#include <vector>
#include <iostream>
#include<map>

using namespace std;

//노래가사중에 특정 키워드가 몇개 포함되어있는지
//키워드는 ?가 포함된 문자열
//e) fro?? 는 frodo front frost가 매치
//word는 가사 , queries 키워드
//word안에는 중복X , 소문자
//key는 중복가능  , 소문자와 ? , ?는 접두사 or 접미사

struct Node
{
	int count;
	char c;
	Node* alpha[27];

	Node() {
		this->count = 1;
		for (int i = 0; i < 27; i++) alpha[i] = NULL;
	}
};

//1.word로 트라이구조를 만든다
//2.querues를 보면서 일치하는거를 찾는다

int tmp_answer = 0;
//현재 now에 alpha에 s[index]가 존재하는지
void check(Node* now, string& s, int index) {

	//와일드카드면
	if (s[index] == '?') {
		tmp_answer += now->count;
	}
	//아니면
	else {
		int tmp = s[index] - 'a';
		if (now->alpha[tmp] != NULL) {
			check(now->alpha[tmp], s, index + 1);
		}
		else return;
	}
}
void r_check(Node*now, string& s, int index) {
	//와일드카드면
	if (s[index] == '?') {
		tmp_answer += now->count;
	}
	//아니면
	else {
		int tmp = s[index] - 'a';
		if (now->alpha[tmp] != NULL) {
			r_check(now->alpha[tmp], s, index - 1);
		}
		else return;
	}
}
vector<int> solution(vector<string> words, vector<string> queries) {
	vector<int> answer;

	Node* root[100001] = { NULL };
	Node* r_root[100001] = { NULL };
	Node* now;
	Node* re_now;
	int index;

	//1
	for (int i = 0; i < words.size(); i++) {
		string s = words[i];

		//정방향
		if (root[s.size()] == NULL) {
			root[s.size()] = new Node();
			now = root[s.size()];
		}
		else {
			now = root[s.size()];
			now->count++;
		}
		for (int j = 0; j < s.size(); j++) {
			index = s[j] - 'a';
			
			//없다면
			if (now->alpha[index] == NULL) {
				now->alpha[index] = new Node();
				now->alpha[index]->c = s[j];
			}
			//있다면
			else {
				now->alpha[index]->count++;
			}
			now = now->alpha[index];
		}

		//역방향
		if (r_root[s.size()] == NULL) {
			r_root[s.size()] = new Node();
			re_now = r_root[s.size()];
		}
		else {
			re_now = r_root[s.size()];
			re_now->count++;
		}
		for (int j = s.size() - 1; j >= 0; j--) {
			index = s[j] - 'a';

			//없다면
			if (re_now->alpha[index] == NULL) {
				re_now->alpha[index] = new Node();
			}
			//있다면
			else {
				re_now->alpha[index]->count++;
			}
			re_now = re_now->alpha[index];
		}
	}
	
	//2
	map<string, int> m;
	for (int i = 0; i < queries.size(); i++) {
		string s = queries[i];

		//해당하는 문자열이 없으면
		if (root[s.size()] == NULL) {
			m.insert({ s,0 });
		}
		//미리 본것중에 없으면
		else if (m.find(s) == m.end()) {
			if (s[0] == '?') {
				r_check(r_root[s.size()], s, s.size() - 1);
			}
			else {
				check(root[s.size()], s, 0);
			}

			m.insert({ s, tmp_answer });
		}
		//있으면
		else {
			tmp_answer = m.find(s)->second;
		}
		answer.push_back(tmp_answer);
		tmp_answer = 0;

	}
	return answer;
}
