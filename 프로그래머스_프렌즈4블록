#include <string>
#include <vector>

using namespace std;

int m, n;       //높이 , 너비
char arr[30][30];
bool check[30][30];
string tmp;
vector<string> board;

void remove(int x, int y) {
    for (int i = x; i < x + 2; i++) {
        for (int j = y; j < y + 2; j++) {
            arr[i][j] = ' ';
        }
    }
}
bool process(int x , int y) {
    char c = arr[x][y];

    for (int i = x; i < x + 2; i++) {
        for (int j = y; j < y + 2; j++) {
            if (c != arr[i][j]) return false;
        }
    }

    return true;
}
int solution(int m, int n, vector<string> board) {
    int answer = 0;

    //입력 받기
    for (int i = 0; i < board.size(); i++) {
        for (int j = 0; j < board[i].size(); j++) {
            arr[i][j] = board[i][j];
        }
    }

    //지워지는게 없을때까지
    while (1) {
        bool flag = false;

        //탐색
        for (int i = 0; i < m - 1; i++) {
            for (int j = 0; j < n - 1; j++) {
                //지워지면 check
                if (arr[i][j] != ' ' && process(i, j)) {
                    check[i][j] = true;
                    flag = true;
                }
            }
        }

        //지운다
        for (int i = 0; i < m - 1; i++) {
            for (int j = 0; j < n - 1; j++) {
                if (check[i][j]) {
                    check[i][j] = false;
                    remove(i, j);
                }
            }
        }

        //아래로 내린다
        for (int i = m - 1; i >= 0; i--) {
            for (int j = 0; j < n; j++) {
                int tmp_y = i;

                while (tmp_y + 1 < m && arr[tmp_y + 1][j] == ' ')
                {
                    tmp_y++;
                }

                //그대로면 무시
                if (tmp_y == i) continue;
                //아니면 변경
                arr[tmp_y][j] = arr[i][j];
                arr[i][j] = ' ';
            }
        }



        if (!flag) break;
    }

    int tmp = 0;
    //끝나고 나서 개수 센다
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            if (arr[i][j] != ' ') tmp++;
        }
    }

    answer = m * n - tmp;
    return answer;
}
